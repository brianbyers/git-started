# Provide a consistent environment for the hooks as well as helper
# functions solving common problems
#
# This script will always put you at the top level of the repository to modify
# with several configuration variables set.
#
#   STARTING_DIR = The directory where the user started the command
#   TOOL_DIR = The 'util/' directory in git-started, relative
#   TARGET_DIR = The root directory of the repository to act upon
#   LOCAL_DIR = The 'local/' directory to use, under TARGET_DIR
#   SUBMODULE_PATH = Path to git-started as a submodule or empty string
#
# There are many options that can be set in order to tweak the behavior.
# Some options set up defaults, but you can override them through the command
# line invocation as well as in a local config file in
# util/config/git-started-setup
#
# Command line override example for the DEBUG setting:
#    DEBUG=1 util/bin/setup_repository

# Write out a debug message to stderr if debug mode enabled
function debug() {
    debug_enabled && echo "$DEBUG_INDENT"${1+"$@"} >&2
    return 0
}

# Return 0 if debug is enabled
function debug_enabled() {
    [ ! -z "$DEBUG" ]
}

# Increase debug indent level
function debug_indent() {
    DEBUG_INDENT+="    "
    debug ${1+"$@"}
}

# Decrease the debug indent level
function debug_outdent() {
    debug "$1"
    DEBUG_INDENT="${DEBUG_INDENT:4}"
}

# Clear the current line
function echo_clear_line() {
    printf "\e[G\e[K"
}

# Allow escape codes
function echo_escape {
    printf "%b\n" "$1"
}

# Echo a prompt without a newline
function echo_prompt() {
    printf "%s" "$1"
}

# Get the extension of a filename
# Needs to work with "file.txt" and return "txt", "no_extension" returns ""
# and "some.dir.name/some/path.name.here" shows "here"
# 
# Parameters: ResultVariableName FileName
function file_extension() {
    local FN="${2##*/}" # Remove path, which might have periods
    local BASE="${FN%.*}" # Remove extension, file may have lots.of.periods or none
    local EXTENSION="${FN:${#BASE}+1}"
    debug "file_extension '$2' is '$EXTENSION'"
    local "$1" && indirect $1 "$EXTENSION"
}

# Finds an executable file for a given path.  Searches the local directory,
# main repository, then finally the git-started repository.  When git-started
# is used as a submodule, the directory layout might look like this
#
# /local/some_path      Priority #1
# some_path             Priority #2
# /submodule/some_path  Priority #3
#
# The resulting file must be executable or it won't be returned.
#
# Parameters: ResultVariableName PathYouWantToFind
function get_executable() {
    local SOME_PATH="$2"
    debug_indent "get_executable searching for '$SOME_PATH'"

    if [ -x "${LOCAL_DIR}/${SOME_PATH}" ]; then
        debug_outdent "get_executable found local '${LOCAL_DIR}/${SOME_PATH}'"
        local "$1" && indirect $1 "${LOCAL_DIR}/${SOME_PATH}"
        return 0
    fi

    if [ -x "${TARGET_DIR}/${SOME_PATH}" ]; then
        debug_outdent "get_executable found main '${TARGET_DIR}/${SOME_PATH}'"
        local "$1" && indirect $1 "${TARGET_DIR}/${SOME_PATH}"
        return 0
    fi

    if is_submodule; then
        if [ -x "${SUBMODULE_PATH}/${SOME_PATH}" ]; then
            debug_outdent "get_executable found submodule '${SUBMODULE_PATH}/${SOME_PATH}'"
            local "$1" && indirect $1 "${SUBMODULE_PATH}/${SOME_PATH}"
            return 0
        fi
    fi

    # Failure to find a matching file
    debug_outdent "get_executable failed to find match"
    local "$1" && indirect $1 ""
    return 1
}


# Echos out the file processing "submodule" or the file type for the given
# incoming file
#
# Parameters:  ResultVariableName Filename
function get_file_type() {
    debug_indent "get_file_type '$2'"
    local TYPE="$(run_all_scripts util/helpers/file_detection.d "$2")"
    debug "get_file_type result '$TYPE'"

    if [ -z "$TYPE" ]; then
        # Failed to detect the type
        debug_outdent "get_file_type returning 'unknown'"
        local "$1" && indirect $1 "unknown"
        return 1
    fi

    debug_outdent "get_file_type result '$TYPE'"
    local "$1" && indirect $1 "$TYPE"
    return 0
}

# Assign data to a variable that's in a parent scope.
# See http://tldp.org/LDP/abs/html/ivr.html for lots of info.
# Based on "upvar" from
# http://www.fvue.nl/wiki/Bash:_Passing_variables_by_reference
#
# Can't use that version as it is GPL.  This one only works with
# references and doesn't bother with validation.  Does not send arrays.
# Only can use this to pass a single value up.  Can't do multiples.
#
# Usage:  (probably at the bottom of your script)
#     local "$1" && indirect $1 "some value to assign"
#
# Parameters: VariableNameToAssign ValueToAssign
function indirect() {
    unset -v "$1"
    eval $1=\"\$2\"
}


# Returns a positive result (exit code 0) if we are currently in a
# git submodule.  Based off https://gist.github.com/sehe/1208393
function is_submodule() {
    local CHILD_DIR PARENT_DIR MODULE_PATH FULL_MODULE_PATH

    if [ ! -z "$CACHED_IS_SUBMODULE" ]; then
        debug "is_submodule cached $CACHED_IS_SUBMODULE"
        return $CACHED_IS_SUBMODULE
    fi

    # Get the root of this repository
    CHILD_DIR="$(git rev-parse --show-toplevel)"
    debug_indent "is_submodule CHILD_DIR '$CHILD_DIR'"

    if [ -z "$CHILD_DIR" ]; then
        CACHED_IS_SUBMODULE=1
        debug_outdent "is_submodule 1 = no child directory - strange error"
        return 1 # Negative
    fi

    # Get the root of the parent repository
    PARENT_DIR="$(cd "$CHILD_DIR/.." && git rev-parse --show-toplevel 2> /dev/null)"
    debug "is_submodule PARENT_DIR '$PARENT_DIR'"

    if [ -z "$PARENT_DIR" ]; then
        CACHED_IS_SUBMODULE=1
        debug_outdent "is_submodule 1 = parent is not a repository"
        return 1 # Negative
    fi

    # List all submodules in parent.  Careful with the subshells
    while read MODULE_PATH; do
        # Get the full path to the module
        FULL_MODULE_PATH="$( cd "$PARENT_DIR" && cd "$MODULE_PATH" && git rev-parse --show-toplevel 2> /dev/null )"
        debug "is_submodule FULL_MODULE_PATH '$FULL_MODULE_PATH'"

        if [ "$FULL_MODULE_PATH" == "$CHILD_DIR" ]; then
            # These variables are NOT local
            SUBMODULE_PATH="$MODULE_PATH"
            debug "is_submodule set SUBMODULE_PATH='$SUBMODULE_PATH'"
            CACHED_IS_SUBMODULE=0
            debug_outdent "is_submodule 0 = submodule matches"
            return 0 # Affirmative
        fi
    done < <( cd "$PARENT_DIR"; git submodule --quiet foreach 'echo $path' 2> /dev/null )

    CACHED_IS_SUBMODULE=1
    debug_outdent "is_submodule 1 = no matching submodule"
    return 1 # Negative
}

# Execute a series of commands on exit
function on_exit() {
    local N=${#ON_EXIT_ITEMS[*]}
    debug_indent "on_exit adding '$*'"
    ON_EXIT_ITEMS[$n]="$*"

    if [[ $n -eq 0 ]]; then
        trap on_exit_trap EXIT
        debug_outdent "on_exit set trap"
    else
        debug_outdent "on_exit trap already set"
    fi
}

# This is what is ran by the trap
function on_exit_trap() {
    debug_indent "on_exit_trap start"
    for i in "${ON_EXIT_ITEMS[@]}"; do
        debug "on_exit_trap '$i'"
        eval $i
    done
    debug_outdent "on_exit_trap complete"
}

# Generate a random string of the given length.
# Uses no external shell commands nor loops.
#
# Parameters: ResultVariableName LengthOfString
function random_string() {
    local LETTERS="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_"
    local VAR

    debug_indent "random_string length of $2"
    eval "printf -v VAR '\${LETTERS:\$RANDOM%%64:1}%.0s' {1..$2}"
    eval "VAR=\"$VAR\""
    debug_outdent "random_string '$VAR'"
    local "$1" && indirect $1 "$VAR"
}

# Resolve paths based on an original location.  Useful for figuring out
# what files were requested to be specified when running command-line
# tools.
# Does NOT remove . or .. from paths.  Does not consolidate multiple slashes
# into a single slash.
# Echos the result with quotes.
# Usage:  . "${0%/*}"/git-started-setup    # Set STARTING_DIR
#         resolve_path FILES "$STARTING_DIR" ${1+"$@"})
# Parameters:  ResultVariableName DirectoryFromWhence FilenameOrPath
function resolve_path() {
    local WHENCE="$2" # Directory that we use for resolution
    local FILE="$3" # Relative or absolute file/path
    local RESULT="$FILE" # Our end result
    debug_indent "resolve_path '$WHENCE' '$FILE'"

    if [ "${FILE:0:1}" != "/" ]; then
        RESULT="${WHENCE}/${FILE}"
    fi

    debug_outdent "resolve_path result is '$RESULT'"
    local "$1" && indirect $1 "$RESULT"
}

# Run all scripts in the given subdirectory, like the run-parts command.
# Exit on error
# Parameters:  DirectoryOfScripts ArgsToPassToScripts
function run_all_scripts() {
    local RESULT SCRIPT
    local DIR="$1"
    shift

    debug_indent "run_all_scripts ${1+"$@"}"

    if [ ! -d "$DIR" ] && [ ! -d "./$SUBMODULE_PATH/$DIR" ] && [ ! -d "local/$DIR" ]; then
        debug_outdent "run_all_scripts '$DIR' does not exist"
        # No directory, thus no scripts to run, thus success!
        return 0
    fi

    while read FN; do
        if get_executable SCRIPT "$DIR/$FN"; then
            debug "run_all_scripts executable is '$SCRIPT'"

            # Run in subshell so we preserve environment.  Keep current environment
            # variables around for things like the pre-commit hook.
            (
                . "$SCRIPT" ${1+"$@"}
            )

            # Stop if any script reported an error
            RESULT=$?
            debug "run_all_scripts result $RESULT"

            if [ $RESULT -ne 0 ]; then
                debug_outdent "run_all_scripts aborting on first failure"
                return $RESULT
            fi
        fi
    done < <(find "./$SUBMODULE_PATH/$DIR" "$DIR" local/"$DIR" -maxdepth 1 -not -name .\* -type f -or -type l 2>/dev/null | sed "s/.*\\///" | sort | uniq)

    debug_outdent "run_all_scripts all passed"
    return 0
}

# Run all helper scripts that match the settings
#
# VariablePrefix is used for determining what settings to use
# HelperDirectory is the name of the directory in util/helpers for scripts
# Filename is the filename to work upon
#
# TargetFile exists for reporting in case we copied TargetFile to a
# temporary file.  That temporary file would be passed in as Filename.
#
# Parameters: VariablePrefix HelperDirectory Filename MoreArgsToPassToScripts
function run_helpers() {
    debug_indent "run_helpers ${1+"$@"}"
    local PREFIX="$1" # Prefix for variable to use for programs
    local HELPER_DIR="util/helpers.d/$2" # Directory with scripts
    local FILE="$3" # Filename to check or run against
    local CONFIG CONFIGS COMMAND CONFIG_COMMANDS FILE_TYPE MISSING_COMMANDS OPTIONS OPTIONS_VARIABLE RESULT
    get_file_type FILE_TYPE "$FILE"
    local CONFIGS_VAR_NAME="${PREFIX}_${FILE_TYPE}"
    uppercase CONFIGS_VAR_NAME "$CONFIGS_VAR_NAME"
    CONFIGS="${!CONFIGS_VAR_NAME}"
    debug "run_helpers config '$CONFIGS_VAR_NAME' '$CONFIGS'"
    shift # Remove PREFIX
    shift # Remove HELPER_DIR

    if [ -z "$CONFIGS" ]; then
        # No configuration - skip validation
        debug_outdent 'run_helpers nothing to try'
        return 0
    fi

    # Find a configuration that works
    for CONFIG in $CONFIGS; do
        debug "run_helpers scanning configuration '$CONFIG'"
        if run_helper_script "$CONFIG"; then
            debug "run_helpers running configuration '$CONFIG'"
            run_helper_script "$CONFIG" ${1+"$@"}
            RESULT=$?
            debug_outdent "run_helpers result $RESULT"
            return $RESULT
        fi
    done

    # No matches, thus success as no configs were runnable
    # and therefore none reported problems
    debug_outdent "run_helpers nothing matched"
    return 0
}

# Runs a set of scripts from util/helpers/*/...
# If any fail, immediately stop.
#
# CommandSet is a list of commands, like prettyprint+expand, which will run both commands
#
# Parameters: CommandSet MoreArgsToPassToScripts
function run_helper_script() {
    local COMMAND_SET="$1"
    local OPTIONS OPTIONS_VARIABLE RESULT
    debug_indent "run_helper_script ${1+"$@"}"
    shift # Remove CommandSet

    # Change command1+command2 into space separated list
    for COMMAND in ${COMMAND_SET//+/ /}; do
        debug "run_helper_script command '$COMMAND'"

        # Automatically fall back to the _common directory
        get_executable SCRIPT "${HELPER_DIR}/${FILE_TYPE}/${COMMAND}" || get_executable SCRIPT "${HELPER_DIR}/_common/${COMMAND}"

        if [ -z "$SCRIPT" ]; then
            debug_outdent "run_helper_script command does not exist or is not executable - aborting"
            return 1
        fi

        OPTIONS_VARIABLE="${PREFIX}_${FILE_TYPE}_${COMMAND}_OPTIONS"
        uppercase OPTIONS_VARIABLE "$OPTIONS_VARIABLE"
        OPTIONS="${!OPTIONS_VARIABLE}"
        debug "run_helper_script '$OPTIONS_VARIABLE' '$OPTIONS'"

        # Run in a subshell for safety
        (
            . "$SCRIPT" ${1+"$@"}
        )

        RESULT=$?
        debug "run_helper_script result $RESULT"

        if [ $RESULT -ne 0 ]; then
            debug_outdent "run_helper_script command reported failure"
            return $RESULT
        fi
    done

    debug_outdent "run_helper_script success"
}


# Returns information about a file as a string
# Result:  MD5 Mode User:Group Size
# Does not log the last modification date - just info about the content
function stat_file() {
    local FN="$1"
    git hash-object "$FN" | tr -d "\n"
    /usr/bin/stat --format=" %f%a %u:%g %s" "$FN" 2>/dev/null || stat -f " %p %u:%g %z" "$FN"
}

# On successful termination of a command, send its "stdout" to a specific
# file.  On failed termination, send "stdout" and "stderr" back out via
# the normal means.
#
# Parameters: DestinationFile CommandToRunWithArguments
function success_save() {
    local DEST="$1"
    local TEMP_DIR
    local RESULT
    debug_indent "success_save ${1+"$@"}"
    temporary_directory TEMP_DIR
    shift
    ${1+"$@"} > "$TEMP_DIR/stdout" 2> "$TEMP_DIR/stderr"
    RESULT=$?

    if [ $RESULT -eq 0 ]; then
        # Drop stderr and send stdout to destination file
        # Can not use "mv" as it doesn't preserve target file permissions
        cat "$TEMP_DIR/stdout" > "$DEST"
    else
        # Send stderr and stdout back out
        cat "$TEMP_DIR/stderr" >&2
        cat "$TEMP_DIR/stdout"
    fi

    debug_outdent "success_save result $RESULT"
    return $RESULT
}

# Create a temporary directory
#
# No subshells allowed!  Mixing subshells and on_exit does not work.
#
# Parameters: ResultVariableName
function temporary_directory() {
    local DIR

    debug_indent "temporary_directory '$1'"
    while true; do
        temporary_name DIR
        if [ ! -e "$DIR" ]; then
            mkdir -m 0700 "$DIR" 2>/dev/null && \
                debug_outdent "temporary_directory $DIR" && \
                on_exit "rm -rf '$DIR'" && \
                local "$1" && \
                indirect $1 $DIR && \
                return 0
            debug "temporary_directory '$DIR' could not be created"
        else
            debug "temporary_directory '$DIR' already exists"
        fi
    done
}

# Find where temporary files are supposed to go
#
# Parameters: ResultVariableName
function temporary_directory_location() {
    # Initial default.  We override this with better things.
    local DIR=/tmp

    if [ ! -z "$TMPDIR" ] && [ -d "$TMPDIR" ]; then
        DIR="$TMPDIR"
    fi

    local "$1" && indirect $1 "$DIR"
}

# Create a name that is random for a temporary item.
# Must work for both a directory and a file name.
#
# Parameters: ResultVariableName
function temporary_name() {
    local TEMPDIR
    local RANDOM_STRING
    temporary_directory_location TEMPDIR
    random_string RANDOM_STRING 16
    local "$1" && indirect $1 "$TEMPDIR/git-started.$RANDOM_STRING"
}

# Attempt to see if a program is in the path and if it can be used.
# Returns true if the program is available.
#
# Parameters: ProgramName
function test_for_program() {
    debug_indent "test_for_program '$1'"
    local RESULT
    local WHICH="$(which "$1" 2>&1)"
    RESULT=$?

    # No error code
    if [ $RESULT -eq 0 ]; then
        # A string was reported back
        if [ ! -z "$WHICH" ]; then
            # That string is a real executable
            if [ -x "$WHICH" ]; then
                debug_outdent "test_for_program '$WHICH' success"
                return 0
            else
                debug_outdent "test_for_program '$WHICH' file not found"
            fi
        else
            debug_outdent "test_for_program '$WHICH' empty string"
        fi
    else
        debug_outdent "test_for_program '$WHICH' error code '$RESULT'"
    fi

    return 1
}


# Change a string to uppercase.  Only ASCII letters are affected.
# bash on Mac OS X does not support ${VAR^^} due to it having
# only version 3.
#
# Parameters:  ResultVariableName InputString
function uppercase() {
    local STR="$2"
    STR="${STR//a/A}"
    STR="${STR//b/B}"
    STR="${STR//c/C}"
    STR="${STR//d/D}"
    STR="${STR//e/E}"
    STR="${STR//f/F}"
    STR="${STR//g/G}"
    STR="${STR//h/H}"
    STR="${STR//i/I}"
    STR="${STR//j/J}"
    STR="${STR//k/K}"
    STR="${STR//l/L}"
    STR="${STR//m/M}"
    STR="${STR//n/N}"
    STR="${STR//o/O}"
    STR="${STR//p/P}"
    STR="${STR//q/Q}"
    STR="${STR//r/R}"
    STR="${STR//s/S}"
    STR="${STR//t/T}"
    STR="${STR//u/U}"
    STR="${STR//v/V}"
    STR="${STR//w/W}"
    STR="${STR//x/X}"
    STR="${STR//y/Y}"
    STR="${STR//z/Z}"
    local "$1" && indirect $1 "$STR"
}


# Go to the root of the repository we with to act upon
STARTING_DIR="$(pwd)"

# Might be sourcing a file in the current directory
if [ "${BASH_SOURCE%/*}" != "$BASH_SOURCE" ]; then
    cd "${BASH_SOURCE%/*}"
fi

# Remove any possibility of the environment messing up the rev-parse
unset GIT_DIR
cd "$(git rev-parse --show-toplevel)"
SUBMODULE_PATH=""

# Debugging mode - lots of useful debug information gets shown
# when you change this to 1
: ${DEBUG:=""}
DEBUG_INDENT=""

# Enable colors - you can use "yes" for always use colors, "no" to never use
# colors, or "auto" for them to be automatically applied if using a terminal
: ${COLOR:="auto"}

if ! is_submodule; then
    TOOL_DIR="util"
    TARGET_DIR="$(pwd)"
    LOCAL_DIR="$TARGET_DIR/local"
else
    TOOL_DIR="${SUBMODULE_PATH}/util"
    cd ..
    cd "$(git rev-parse --show-toplevel)" # Up to the root of the real repo
    TARGET_DIR="$(pwd)"
    LOCAL_DIR="$TARGET_DIR/local"
fi

# Add node programs to the path
if [ -d "$TARGET_DIR/node_modules/.bin" ]; then
    PATH="$TARGET_DIR/node_modules/.bin:$PATH"
fi

# Directories to ignore for ctags, etags, pretty printing, lint checking
# Include trailing slash
IGNORE_DIRS="3rd_party/ node_modules/ vendor/"

# Show messages in pretty colors.  Change or remove colors here.
COLOR_LINT_ERROR="\e[1;31m" # Bright red
COLOR_LINT_FILENAME="\e[1;33m" # Bright yellow
COLOR_PRETTY_ERROR="\e[1;31m" # Bright red
COLOR_PRETTY_FILENAME="\e[1;33m" # Bright yellow
COLOR_PRETTY_MESSAGE="\e[32m" # Green
COLOR_RESET="\e[m" # Reset

# Lint and pretty printer programs to use, by language.
# The list is a series of programs that are tried (see util/helpers/lint.d
# and util/helpers/pretty_print.d) in order until one script detects
# an available program and then it is used for the task.
# To run programs XX, then falling back to YY when XX is not available, use
# LINT_LANG="XX YY"
# To run XX and also run YY if both are available, falling back to XX
# and then falling back further to YY, use
# LINT_LANG="XX+YY XX YY"
# To completely disable
# LINT_LANG=""
LINT_CSS="prettycss"
LINT_JS="jslint jsl"
LINT_JSON="jslint"
LINT_MARKDOWN=""
LINT_PHP="cli"
LINT_SASS="sass"
LINT_SCSS="sass"
LINT_YAML=""

# Lint command-line options for various language/program pairs
LINT_CSS_PRETTYCSS_OPTIONS="-s --ignore autocorrect --ignore autocorrect-swap --ignore suggest-relative-unit --ignore unofficial"

LINT_JS_JSL_OPTIONS="-nologo -nofilelisting -nosummary -process"
LINT_JS_JSLINT_OPTIONS=""

LINT_JSON_JSLINT_OPTIONS=""

LINT_PHP_CLI_OPTIONS="-l -d error_reporting=E_ALL -d display_errors=0"

LINT_SASS_SASS_OPTIONS="--check"

LINT_SCSS_SASS_OPTIONS="--check --scss"

# Pretty printers have the same format as the lint checkers
PRETTY_CSS="prettycss expand"
PRETTY_JS="jsbeautify expand"
PRETTY_JSON="jsbeautify expand"
PRETTY_MARKDOWN="expand"
PRETTY_PHP="phpbeautifier expand"
PRETTY_SASS="sassconvert expand"
PRETTY_SCSS="sassconvert expand"
PRETTY_YAML="expand"

# Pretty printing command-line options
PRETTY_CSS_EXPAND_OPTIONS="--tabs=4 --initial"
PRETTY_CSS_PRETTYCSS_OPTIONS="-s --ignore autocorrect --ignore autocorrect-swap --ignore suggest-relative-unit --ignore unofficial"
PRETTY_CSS_UNEXPAND_OPTIONS="--tabs=4 --first-only"

PRETTY_JS_EXPAND_OPTIONS="--tabs=4 --initial"
PRETTY_JS_JSBEAUTIFY_OPTIONS="--jslint-happy --brace-style=end-expand"
PRETTY_JS_UNEXPAND_OPTIONS="--tabs=4 --first-only"

PRETTY_JSON_EXPAND_OPTIONS="--tabs=4 --initial"
PRETTY_JSON_JSBEAUTIFY_OPTIONS="--jslint-happy --brace-style=end-expand"
PRETTY_JSON_UNEXPAND_OPTIONS="--tabs=4 --first-only"

PRETTY_MARKDOWN_EXPAND_OPTIONS="--tabs=4 --initial"
PRETTY_MARKDOWN_UNEXPAND_OPTIONS="--tabs=4 --first-only"

PRETTY_PHP_EXPAND_OPTIONS="--tabs=4 --initial"
PRETTY_PHP_PHPBEAUTIFIER_OPTIONS="-t"
PRETTY_PHP_UNEXPAND_OPTIONS="--tabs=4 --first-only"

PRETTY_SCSS_EXPAND_OPTIONS="--tabs=4 --initial"
PRETTY_SCSS_SASSCONVERT_OPTIONS="--from sass --to sass --indent 4"
PRETTY_SCSS_UNEXPAND_OPTIONS="--tabs=4 --first-only"

PRETTY_SCSS_EXPAND_OPTIONS="--tabs=4 --initial"
PRETTY_SCSS_SASSCONVERT_OPTIONS="--from scss --to scss --indent 4"
PRETTY_SCSS_UNEXPAND_OPTIONS="--tabs=4 --first-only"

PRETTY_YAML_EXPAND_OPTIONS="--tabs=4 --initial"
PRETTY_YAML_UNEXPAND_OPTIONS="--tabs=4 --first-only"

# Provide the ability to override the above config with your own values
if [ -f util/config/git-started-setup ]; then
    . util/config/git-started-setup
fi

# Detect if COLOR=auto and if we are on a tty
if [ "$COLOR" == "auto" ]; then
    if [ -t 0 ]; then
        COLOR="yes"
    else
        COLOR="no"
    fi
fi

# If COLOR is "no", clear out all colors
if [ "$COLOR" == "no" ]; then
    unset printenv | grep -o "^COLOR_[^=]"
fi

