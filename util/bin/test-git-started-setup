#!/bin/bash
#
# Ensure things are all correct

. "${0%/*}"/git-started-setup

# Must return three octal digits
function get_file_permissions() {
    local RESULT
    RESULT="$(/usr/bin/stat -c "%a" "$1" 2> /dev/null || stat -f "%p" "$1")"
    echo "${RESULT: -3}"
}

FAILURES=0
TESTS=0
if [ ! -z "$DEBUG" ]; then
    set -x
fi

function FAIL() {
    echo "FAIL"
    echo " ****** $1"
    : $((FAILURES++))
}

# Parameters: ResultVariableName
function MAKE_REPO() {
    local TEMP_REPO
    temporary_directory TEMP_REPO
    (
        cd "$TEMP_REPO"
        git init
        echo "Test repo" > test.txt
        git add test.txt
        git commit -m "Initial commit"
    ) > /dev/null
    local "$1" && indirect $1 "$TEMP_REPO"
}

function PASS() {
    echo "ok"
}

function TEST() {
    printf "%s" "$1: "
    : $((TESTS++))
}


#
# bash features
#
TEST "bash \$BASH_SOURCE"

if [ -z "$BASH_SOURCE" ]; then
    FAIL "Not set"
else
    PASS
fi

TEST "bash +="
A=AAA
A+=BBB

if [ "$A" != "AAABBB" ]; then
    FAIL "Mismatch: got '$A' wanted 'AAABBB'"
else
    PASS
fi


#
# file_extension
#
for FILE in file: file.txt:txt file.txt.old:old /file.ext:ext ../file.ext:ext .././dir.name/exe.txt/file.me:me; do
    EXPECTED=${FILE##*:}
    INPUT=${FILE%:*}
    TEST "file_extension \"$INPUT\" = \"$EXPECTED\""
    file_extension ACTUAL "$INPUT"

    if [ "$ACTUAL" == "$EXPECTED" ]; then
        PASS
    else
        FAIL "got \"$ACTUAL\""
    fi
done


#
# get_executable
#
TEST "get_executable"
FAIL "No tests exist"


#
# get_file_type
#
for FILE in a.css:css b.js:js c.html:html cc.htm:html d.php:php dd.inc:php e.txt:unknown; do
    EXPECTED=${FILE##*:}
    INPUT=${FILE%:*}
    TEST "get_file_type \"$INPUT\" = \"$EXPECTED\""
    get_file_type ACTUAL "$INPUT"

    if [ "$ACTUAL" == "$EXPECTED" ]; then
        PASS
    else
        FAIL "got \"$ACTUAL\""
    fi
done


#
# get_interpreter
#
temporary_directory TEMP_DIR
OUTPUT="bash:#!/bin/bash
bash:#! /bin/bash
bash:#!/bin/bash -args
bash:#! /bin/bash -args
bash:#!  /bin/bash	-tabs	-here -and -spaces 'too'
bash:#!/usr/bin/env bash  one two
bash:#! /usr/bin/env    bash";
while read LINE; do
    INPUT=${LINE##*:}
    EXPECTED=${LINE%:*}
    echo "$INPUT" > "${TEMP_DIR}/test.txt"
    TEST "get_interpreter \"$INPUT\""
    get_interpreter ACTUAL "${TEMP_DIR}/test.txt"

    if [ "$ACTUAL" == "$EXPECTED" ]; then
        PASS
    else
        FAIL "got \"$ACTUAL\" not \"$EXPECTED\""
    fi
done <<< "$OUTPUT"


#
# is_submodule
#

# First, create a test repository that has a specific directory structure
# for testing
MAKE_REPO TEMP_REPO
(
    cd "$TEMP_REPO"
    mkdir dir
    git submodule add ./ submodule
    git submodule add ./ dir/submodule
    mkdir submodule/dir
    mkdir dir/submodule/dir
) > /dev/null

for DIR_RESULT in /:false /dir:false /submodule:true /dir/submodule:true /submodule/dir:true /dir/submodule/dir:true; do
    EXPECTED=${DIR_RESULT##*:}
    INPUT=${DIR_RESULT%:*}
    unset CACHED_IS_SUBMODULE

    TEST "is_submodule repo${INPUT} = $EXPECTED"

    if (cd "${TEMP_REPO}${INPUT}"; is_submodule); then
        ACTUAL=true
    else
        ACTUAL=false
    fi

    if [ "$ACTUAL" == "$EXPECTED" ]; then
        PASS
    else
        FAIL "got \"$ACTUAL\""
    fi
done


#
# on_exit and on_exit_trap
#
TEST "on_exit and on_exit_trap"
FAIL "No tests exist"


#
# random_string
#
TEST "random_string 12 has right length"
EXPECTED=xxxxxxxxxxxx
random_string ACTUAL 12
ACTUAL=$(echo "$ACTUAL" | tr "a-zA-Z0-9" x)
if [ "$ACTUAL" == "$EXPECTED" ]; then
    PASS
else
    FAIL "got \"$ACTUAL\""
fi

random_string ONE 32
random_string TWO 32
TEST "random_string $ONE != $TWO"
if [ "$ONE" != "$TWO" ]; then
    PASS
else
    FAIL "they matched"
fi


#
# resolve_path
#
for FILE in /a,b:/a/b /c,d/e:/c/d/e f/,g/:f//g/ h/i,/j/k:/j/k; do
    EXPECTED=${FILE##*:}
    INPUT=${FILE%:*}
    DIRNAME=${INPUT%,*}
    FILENAME=${INPUT##*,}
    TEST "resolve_path \"$DIRNAME\" \"$FILENAME\" = \"$EXPECTED\""
    resolve_path ACTUAL "$DIRNAME" "$FILENAME"

    if [ "$ACTUAL" == "$EXPECTED" ]; then
        PASS
    else
        FAIL "got \"$ACTUAL\""
    fi
done


#
# run_all_scripts
#
TEST "run_all_scripts"
# Tests to write
# Empty directory = success
# First script fails = fail and stop running more
# Second script fails = fail and stop running more
# Last script fails = fail and stop running more
# One script passes = success
# Multiple scripts pass = success
# Confirm environment is reset
# Confirm subdirectories are not scanned
# Confirm files in local config override and are injected properly
FAIL "no tests exist"


#
# run_helpers
#
TEST "run_helpers"
# Tests to write
# Ensure the variable prefix is used
# Ensure helper directory is used (no dir, empty dir, multiple files)
# Ensure files are executed in the right order
# Check that local overrides are applied or inserted
# Check that the original filename isn't altered?
# Check that the target exists if one is specified
# If no target, check that the original is used
# CHeck that extra arguments are all passed to the script
FAIL "no tests exist"


#
# sed
#
TEST "sed strip whitespace"
EXPECTED=$( echo -e "\t \t blah" )
ACTUAL=$( echo -e "\t \t blah\t \t " | sed 's/[ 	]*$//' )
if [ "$ACTUAL" == "$EXPECTED" ]; then
    PASS
else
    FAIL "got \"$ACTUAL\""
fi


#
# stat_file
#
# The "stat" of a file should change if the MD5 (content), size, owner,
# group, or mode changes.  If there are other things to check that would be
# tracked by git, then those too should be checked.
# This should return a single line describing a file.
temporary_directory TEMP_DIR
FN1=$TEMP_DIR/fn1
FN2=$TEMP_DIR/fn2
echo "Here is some content" >> $FN1
chmod a-w "$FN1"
sleep 2 # Guarantee timestamp mismatches, even on FAT-based systems

TEST "stat_file non-empty string"
STAT1=$(stat_file "$FN1")
if [ -z "$STAT1" ]; then
    FAIL "Empty sting returned for stat"
else
    PASS
fi

TEST "stat_file different mode"
cp -p "$FN1" "$FN2"
chmod a+w "$FN2"
if [ "$(stat_file "$FN2")" == "$STAT1" ]; then
    FAIL "File mode has changed"
else
    PASS
fi

TEST "stat_file different timestamp"
echo "Here is some content" >> $FN2
if [ "$(stat_file "$FN2")" == "$STAT1" ]; then
    FAIL "timestamps are different"
else
    PASS
fi

TEST "stat_file same"
cp -p "$FN1" "$FN2"
if [ "$(stat_file "$FN2")" != "$STAT1" ]; then
    FAIL "Everything is the same and this should match"
else
    PASS
fi


#
# success_save
#
temporary_directory DIR
OUTPUT=$DIR/output
STDOUT=$DIR/stdout
STDERR=$DIR/stderr
function good_result() {
    echo "good stdout"
    echo "good stderr" >&2
    return 0
}
function bad_result() {
    echo "bad stdout"
    echo "bad stderr" >&2
    return 122
}
function test_file_contents() {
    TEST "$1"
    if [ -f "$2" ]; then
        if [ "$(cat "$2")" == "$3" ]; then
            PASS
        else
            FAIL "$4"
        fi
    else
        FAIL "output file should have been created"
    fi
}

success_save "$OUTPUT" good_result > "$STDOUT" 2> "$STDERR"
RESULT=$?

test_file_contents "success_save success output" "$OUTPUT" "good stdout" "output not funneled into file"
test_file_contents "success_save success stdout" "$STDOUT" "" "stdout should be empty"
test_file_contents "success_save success stderr" "$STDERR" "" "stderr should be empty"

TEST "success_save success return code"
if [ $RESULT -eq 0 ]; then
    PASS
else
    FAIL "received $RESULT instead of 0"
fi

rm "$OUTPUT" "$STDOUT" "$STDERR"
success_save "$OUTPUT" bad_result > "$STDOUT" 2> "$STDERR"
RESULT=$?

TEST "success_save failure output not created"
if [ ! -e "$OUTPUT" ]; then
    PASS
else
    FAILURE "output file created anyway"
fi

TEST "success_save failure output"
if [ ! -e "$OUTPUT" ]; then
    PASS
else
    FAILURE "output file should not have been created"
fi

test_file_contents "success_save failure stdout" "$STDOUT" "bad stdout" "stdout should be empty"
test_file_contents "success_save failure stderr" "$STDERR" "bad stderr" "stderr should be empty"

TEST "success_save success return code"
if [ $RESULT -eq 122 ]; then
    PASS
else
    FAIL "received $RESULT instead of 122"
fi

echo "unchanged output" > "$OUTPUT"
chmod 701 "$OUTPUT"
success_save "$OUTPUT" good_result > /dev/null 2>&1

TEST "success_save success preserve file permissions"
ACTUAL=$(get_file_permissions "$OUTPUT")
if [ "$ACTUAL" == "701" ]; then
    PASS
else
    FAIL "expected 701 but file permissions were $ACUTAL"
fi

test_file_contents "success_save success output overwritten" "$OUTPUT" "good stdout" "output not properly overwritten"


#
# temporary_directory
#
temporary_directory DIR

TEST "temporary_directory directory is created"
if [ -d "$DIR" ]; then
    PASS
else
    FAIL "\"$DIR\" does not exist"
fi

TEST "temporary_directory can be called repeatedly with different results"
temporary_directory DIR2
if [ "$DIR" != "$DIR2" ]; then
    PASS
else
    FAIL "created \"$DIR\" and \"$DIR2\""
fi

TEST "temporary_directory has a restrictive mode"
PERMS=$(get_file_permissions "$DIR")
if [ "${PERMS: -2}" == "00" ]; then
    PASS
else
    FAIL "permissions were $PERMS"
fi


#
# temporary_directory_location
#
temporary_directory_location DIR
TEST "temporary_directory_location is valid directory"
if [ -d "$DIR" ]; then
    PASS
else
    FAIL "not a directory"
fi


#
# temporary_name
#
temporary_name NAME
TEST "temporary_name does not exist"
if [ ! -e "$NAME" ]; then
    PASS
else
    FAIL "\"$NAME\" exists"
fi

TEST "temporary_name can be created"
touch "$NAME"
if [ $? -eq 0 ]; then
    PASS
else
    FAIL "can not create a file named \"$NAME\""
fi


#
# test_for_program
#
TEST "test_for_program miss"
if ! test_for_program totally_unexpected_and_invalid_program_we_hope; then
    PASS
else
    FAIL "says bad program name exists"
fi

TEST "test_for_program hit"
if test_for_program ls; then
    PASS
else
    FAIL "ls was not found"
fi


#
# uppercase
#
TEST "uppercase empty string"
uppercase ACTUAL ""
if [ -z "$ACTUAL" ]; then
    PASS
else
    FAIL "expected \"\" but got \"$ACTUAL\""
fi

INPUT="abcdefghijklmnopqrstuvwxyz0123456789 hi mom"
TEST "uppercase \"$INPUT\""
uppercase ACTUAL "$INPUT"
if [ "$ACTUAL" == "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 HI MOM" ]; then
    PASS
else
    FAIL "got \"$ACTUAL\""
fi


#
# How the git hooks initially tie into our software
#
# This is a bit special as they are executed in an environment like what
# I will set up in the test.  Doing a "cd .git/hooks/../../bin" goes to the
# bin directory, but ". .git/hooks/../../bin/file" will use util/bin.  To
# Eliminate that problem, I use 'cd -P' for the git hooks.
MAKE_REPO TEMP_REPO
(
    cd "$TEMP_REPO"
    # Must have "bin" for this test to be correct
    mkdir -p bin util/bin util/git/hooks
    rm -rf .git/hooks
    ln -s ../util/git/hooks .git/hooks
    for F in bin/test_path util/bin/test_path; do
        # git-started-setup uses a method like this to determine
        # where its repository root is located
        echo "#!/bin/bash" > "$TEMP_REPO/$F"
        echo "echo \"$F\"" >> "$TEMP_REPO/$F"
        chmod 755 "$TEMP_REPO/$F"
    done
) > /dev/null
TEST "working directory (git hooks + setup)"

# Git hooks use a method like this to determine which file to execute
cat > "$TEMP_REPO/util/git/hooks/post-checkout" <<EOF
#!/bin/bash
. "\$(cd -P "\${0%/*}/../.." && pwd)/bin/test_path"
EOF
chmod 755 "$TEMP_REPO/util/git/hooks/post-checkout"
ACTUAL=$(cd "$TEMP_REPO"; .git/hooks/post-checkout)
EXPECTED=util/bin/test_path
if [ "$ACTUAL" == "$EXPECTED" ]; then
    PASS
else
    FAIL "Expecting $EXPECTED but got $ACTUAL"
fi


#
# This tests the ability for git-started to insert itself in a
# repository either as a submodule or by being merged.
#
SOURCE=$(pwd)
TEST "submodule - pre-commit"
MAKE_REPO TEMP_REPO
(
    cd "$TEMP_REPO"
    git submodule add "$SOURCE" "git-started"
    git commit -m "Adding git-started"
    git-started/util/bin/setup_repository
    echo "NO""COMMIT" > test2.txt
    git add test2.txt
) > /dev/null
if ( cd "$TEMP_REPO"; git commit -m "checking pre-commit hook" > /dev/null 2>&1 ); then
    FAIL "the commit should have been blocked"
else
    PASS
fi

TEST "merged - pre-commit"
MAKE_REPO TEMP_REPO
(
    cd "$TEMP_REPO"
    git remote add origin "$SOURCE"
    git fetch origin
    git merge -m 'auto merge' origin/master
    util/bin/setup_repository
    echo "NO""COMMIT" > test2.txt
    git add test2.txt
) > /dev/null 2>&1
if ( cd "$TEMP_REPO"; git commit -m "checking pre-commit hook" > /dev/null 2>&1 ); then
    FAIL "the commit should have been blocked"
else
    PASS
fi

#
# Done!
#
echo "Tests complete"
echo ""
echo "Failed $FAILURES out of $TESTS tests"
