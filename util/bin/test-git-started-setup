#!/bin/bash
#
# Ensure things are all correct

. "${0%/*}"/git-started-setup

FAILURES=0
TESTS=0
if [ ! -z "$DEBUG" ]; then
    set -x
fi

function FAIL() {
	echo "FAIL"
	echo " ****** $1"
	: $((FAILURES++))
}

function MAKE_REPO() {
	local TEMP_REPO
	TEMP_REPO="$(mktemp -d)"
	(
		cd "$TEMP_REPO"
		git init
		echo "Test repo" > test.txt
		git add test.txt
		git commit -m "Initial commit"
	) > /dev/null
	echo "$TEMP_REPO"
}

function PASS() {
	echo "ok"
}

function TEST() {
	printf "%s" "$1: "
	: $((TESTS++))
}


#
# bash features
#
TEST "bash \$BASH_SOURCE"

if [ -z "$BASH_SOURCE" ]; then
	FAIL "Not set"
else
	PASS
fi

TEST "bash +="
A="AAA"
A+="BBB"

if [ "$A" != "AAABBB" ]; then
	FAIL "Mismatch: got '$A' wanted 'AAABBB'"
else
	PASS
fi


#
# file_extension
#
for FILE in file: file.txt:txt file.txt.old:old /file.ext:ext ../file.ext:ext .././dir.name/exe.txt/file.me:me; do
	EXPECTED="${FILE##*:}"
	INPUT="${FILE%:*}"
	TEST "file_extension \"$INPUT\" = \"$EXPECTED\""
	ACTUAL="$(file_extension "$INPUT")"

	if [ "$ACTUAL" == "$EXPECTED" ]; then
		PASS
	else
		FAIL "got \"$ACTUAL\""
	fi
done


#
# get_executable
#
TEST "get_executable"
FAIL "No tests exist"


#
# get_file_type
#
for FILE in a.css:css b.js:js c.html:html cc.htm:html d.php:php dd.inc:php e.txt:unknown; do
	EXPECTED="${FILE##*:}"
	INPUT="${FILE%:*}"
	TEST "get_file_type \"$INPUT\" = \"$EXPECTED\""
	ACTUAL="$(get_file_type "$INPUT")"

	if [ "$ACTUAL" == "$EXPECTED" ]; then
		PASS
	else
		FAIL "got \"$ACTUAL\""
	fi
done


#
# is_submodule
#

# First, create a test repository that has a specific directory structure
# for testing
TEMP_REPO="$(MAKE_REPO)"
(
	cd "$TEMP_REPO"
	mkdir dir
	git submodule add ./ submodule
	git submodule add ./ dir/submodule
	mkdir submodule/dir
	mkdir dir/submodule/dir
) > /dev/null

for DIR_RESULT in /:false /dir:false /submodule:true /dir/submodule:true /submodule/dir:true /dir/submodule/dir:true; do
	EXPECTED="${DIR_RESULT##*:}"
	INPUT="${DIR_RESULT%:*}"
    unset CACHED_IS_SUBMODULE

	TEST "is_submodule repo${INPUT} = $EXPECTED"

	if (cd "${TEMP_REPO}${INPUT}"; is_submodule); then
		ACTUAL="true"
	else
		ACTUAL="false"
	fi

	if [ "$ACTUAL" == "$EXPECTED" ]; then
		PASS
	else
		FAIL "got \"$ACTUAL\""
	fi
done
rm -rf "$TEMP_REPO"


#
# on_exit and on_exit_trap
#
TEST "on_exit and on_exit_trap"
FAIL "No tests exist"


#
# random_string
#
TEST "random_string 12 has right length"
EXPECTED="xxxxxxxxxxxx"
random_string ACTUAL 12
ACTUAL="$(echo "$ACTUAL" | tr "a-zA-Z0-9" x)"
if [ "$ACTUAL" == "$EXPECTED" ]; then
    PASS
else
    FAIL "got \"$ACTUAL\""
fi

random_string ONE 32
random_string TWO 32
TEST "random_string $ONE != $TWO"
if [ "$ONE" != "$TWO" ]; then
    PASS
else
    FAIL "they matched"
fi


#
# resolve_path
#
for FILE in /a,b:/a/b /c,d/e:/c/d/e f/,g/:f//g/ h/i,/j/k:/j/k; do
	EXPECTED="${FILE##*:}"
	INPUT="${FILE%:*}"
	DIRNAME="${INPUT%,*}"
	FILENAME="${INPUT##*,}"
	TEST "resolve_path \"$DIRNAME\" \"$FILENAME\" = \"$EXPECTED\""
	ACTUAL="$(resolve_path "$DIRNAME" "$FILENAME")"

	if [ "$ACTUAL" == "$EXPECTED" ]; then
		PASS
	else
		FAIL "got \"$ACTUAL\""
	fi
done


#
# run_all_scripts
#
TEST "run_all_scripts"
# Tests to write
# Empty directory = success
# First script fails = fail and stop running more
# Second script fails = fail and stop running more
# Last script fails = fail and stop running more
# One script passes = success
# Multiple scripts pass = success
# Confirm environment is reset
# Confirm subdirectories are not scanned
# Confirm files in local config override and are injected properly
FAIL "no tests exist"


#
# run_helpers
#
TEST "run_helpers"
# Tests to write
# Ensure the variable prefix is used
# Ensure helper directory is used (no dir, empty dir, multiple files)
# Ensure files are executed in the right order
# Check that local overrides are applied or inserted
# Check that the original filename isn't altered?
# Check that the target exists if one is specified
# If no target, check that the original is used
# CHeck that extra arguments are all passed to the script
FAIL "no tests exist"


#
# stat_file
#
# The "stat" of a file should change if the MD5 (content), size, owner,
# group, or mode changes.  If there are other things to check that would be
# tracked by git, then those too should be checked.
# This should return a single line describing a file.
temporary_directory TEMP_DIR
FN1="$TEMP_DIR/fn1"
FN2="$TEMP_DIR/fn2"
echo "Here is some content" >> $FN1
chmod a-w "$FN1"
sleep 2 # Guarantee timestamp mismatches, even on FAT-based systems

TEST "stat_file non-empty string"
STAT1="$(stat_file "$FN1")"
if [ -z "$STAT1" ]; then
    FAIL "Empty sting returned for stat"
else
    PASS
fi

TEST "stat_file different mode"
cp -p "$FN1" "$FN2"
chmod a+w "$FN2"
if [ "$(stat_file "$FN2")" == "$STAT1" ]; then
    FAIL "File mode has changed"
else
    PASS
fi

TEST "stat_file different timestamp"
echo "Here is some content" >> $FN2
if [ "$(stat_file "$FN2")" == "$STAT1" ]; then
    FAIL "timestamps are different"
else
    PASS
fi

TEST "stat_file same"
cp -p "$FN1" "$FN2"
if [ "$(stat_file "$FN2")" != "$STAT1" ]; then
    FAIL "Everything is the same and this should match"
else
    PASS
fi
rm -rf "$TEMP_DIR"


#
# success_save
#
TEST "success_save"
# test on error stdout and stderr are sent out
# test on success stdout is written and stderr is removed, no output
FAIL "no tests exist"


#
# temporary_directory
#
TEST "temporary_directory"
# test directory is created
# test directory is random
# test directory has mode 0700
FAIL "no tests exist"


#
# temporary_directory_location
#
temporary_directory_location DIR
TEST "temporary_directory_location is valid directory"
if [ -d "$DIR" ]; then
    PASS
else
    FAIL "not a directory"
fi


#
# temporary_name
#
temporary_name NAME
TEST "temporary_name does not exist"
if [ ! -e "$NAME" ]; then
    PASS
else
    FAIL "\"$NAME\" exists"
fi

TEST "temporary_name can be created"
touch "$NAME"
if [ $? -eq 0 ]; then
    PASS
else
    FAIL "can not create a file named \"$NAME\""
fi


#
# test_for_program
#
TEST "test_for_program miss"
if ! test_for_program totally_unexpected_and_invalid_program_we_hope; then
	PASS
else
	FAIL "says bad program name exists"
fi

TEST "test_for_program hit"
if test_for_program ls; then
	PASS
else
	FAIL "ls was not found"
fi


#
# How the git hooks initially tie into our software
#
# This is a bit special as they are executed in an environment like what
# I will set up in the test.  Doing a "cd .git/hooks/../../bin" goes to the
# bin directory, but ". .git/hooks/../../bin/file" will use util/bin.  To
# Eliminate that problem, I use readlink for the git hooks.
TEMP_REPO="$(MAKE_REPO)"
(
	cd "$TEMP_REPO"
	mkdir -p bin util/bin util/git/hooks
	rm -rf .git/hooks
	ln -s ../util/git/hooks .git/hooks
	for F in bin/test_path util/bin/test_path; do
		# git-started-setup uses a method like this to determine
		# where its repository root is located
		echo "#!/bin/bash" > "$TEMP_REPO/$F"
		echo "echo \"$F\"" >> "$TEMP_REPO/$F"
		chmod 755 "$TEMP_REPO/$F"
	done
) > /dev/null
TEST "working directory (git hooks + setup)"

# Git hooks use a method like this to determine which file to execute
cat > "$TEMP_REPO/util/git/hooks/post-checkout" <<EOF
#!/bin/bash
. "\$(readlink -f "\${0%/*}/../..")/bin/test_path"
EOF
chmod 755 "$TEMP_REPO/util/git/hooks/post-checkout"
ACTUAL="$(cd "$TEMP_REPO"; .git/hooks/post-checkout)"
EXPECTED="util/bin/test_path"
if [ "$ACTUAL" == "$EXPECTED" ]; then
	PASS
else
	FAIL "Expecting $EXPECTED but got $ACTUAL"
fi
rm -rf "$TEMP_REPO"


#
# This tests the ability for git-started to insert itself in a
# repository either as a submodule or by being merged.
#
SOURCE="$(pwd)"
TEST "submodule - pre-commit"
TEMP_REPO="$(MAKE_REPO)"
(
	cd "$TEMP_REPO"
	git submodule add "$SOURCE" "git-started"
	git commit -m "Adding git-started"
	git-started/util/bin/setup_repository
	echo "NO""COMMIT" > test2.txt
	git add test2.txt
) > /dev/null
if ( cd "$TEMP_REPO"; git commit -m "checking pre-commit hook" > /dev/null 2>&1 ); then
	FAIL "the commit should have been blocked"
else
	PASS
fi
rm -rf "$TEMP_REPO"

TEST "merged - pre-commit"
TEMP_REPO="$(MAKE_REPO)"
(
	cd "$TEMP_REPO"
	git remote add origin "$SOURCE"
	git fetch origin
	git merge -m 'auto merge' origin/master
	util/bin/setup_repository
	echo "NO""COMMIT" > test2.txt
	git add test2.txt
) > /dev/null 2>&1
if ( cd "$TEMP_REPO"; git commit -m "checking pre-commit hook" > /dev/null 2>&1 ); then
	FAIL "the commit should have been blocked"
else
	PASS
fi
rm -rf "$TEMP_REPO"

#
# Done!
#
echo "Tests complete"
echo ""
echo "Failed $FAILURES out of $TESTS tests"
